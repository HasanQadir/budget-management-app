# Generated by Django 4.2.7 on 2025-08-20 18:27

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the brand.', max_length=255, unique=True)),
                ('daily_budget', models.DecimalField(decimal_places=2, help_text='Maximum daily budget in USD.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('monthly_budget', models.DecimalField(decimal_places=2, help_text='Maximum monthly budget in USD.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('current_daily_spend', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount spent today.', max_digits=12)),
                ('current_monthly_spend', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount spent this month.', max_digits=12)),
                ('last_daily_reset', models.DateField(default=django.utils.timezone.now, help_text='When the daily spend was last reset.')),
                ('last_monthly_reset', models.DateField(default=django.utils.timezone.now, help_text='When the monthly spend was last reset.')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the brand is active and can run campaigns.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the campaign.', max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('archived', 'Archived')], default='active', help_text='Current status of the campaign.', max_length=20)),
                ('daily_budget', models.DecimalField(decimal_places=2, help_text='Maximum daily budget for this campaign in USD.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('current_daily_spend', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount spent by this campaign today.', max_digits=12)),
                ('last_daily_reset', models.DateField(default=django.utils.timezone.now, help_text='When the daily spend was last reset.')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the campaign is active and can accrue spend.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(help_text='The brand that owns this campaign.', on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='budget.brand')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
                'ordering': ['brand__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DaypartingSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week this schedule applies to.')),
                ('start_time', models.TimeField(help_text='Start time for the schedule (inclusive).')),
                ('end_time', models.TimeField(help_text='End time for the schedule (inclusive).')),
                ('timezone', models.CharField(default='UTC', help_text='Timezone for the schedule times.', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this schedule is active.')),
                ('priority', models.PositiveSmallIntegerField(default=0, help_text='Higher priority schedules take precedence.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(help_text='The campaign this schedule applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='dayparting_schedules', to='budget.campaign')),
            ],
            options={
                'verbose_name': 'Dayparting Schedule',
                'verbose_name_plural': 'Dayparting Schedules',
                'ordering': ['campaign', 'day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='SpendRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount spent in USD.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the spend occurred.')),
                ('reference_id', models.CharField(help_text='External reference ID for this spend record.', max_length=255, unique=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the spend record.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('brand', models.ForeignKey(help_text='The brand associated with this spend record.', on_delete=django.db.models.deletion.CASCADE, related_name='spend_records', to='budget.brand')),
                ('campaign', models.ForeignKey(blank=True, help_text='The campaign associated with this spend record.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spend_records', to='budget.campaign')),
            ],
            options={
                'verbose_name': 'Spend Record',
                'verbose_name_plural': 'Spend Records',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['brand', 'timestamp'], name='budget_spen_brand_i_ddf7b3_idx'), models.Index(fields=['campaign', 'timestamp'], name='budget_spen_campaig_aa1db2_idx'), models.Index(fields=['reference_id'], name='budget_spen_referen_325fdc_idx'), models.Index(fields=['timestamp'], name='budget_spen_timesta_e748f6_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='daypartingschedule',
            constraint=models.UniqueConstraint(fields=('campaign', 'day_of_week', 'start_time', 'end_time'), name='unique_schedule_per_campaign_time', violation_error_message='A schedule already exists for this campaign, day, and time range.'),
        ),
        migrations.AddConstraint(
            model_name='daypartingschedule',
            constraint=models.CheckConstraint(check=models.Q(('end_time__gt', models.F('start_time'))), name='end_time_after_start_time', violation_error_message='End time must be after start time.'),
        ),
        migrations.AlterUniqueTogether(
            name='campaign',
            unique_together={('brand', 'name')},
        ),
    ]
